# スタートアップウェルネス分析アプリケーション - Next.js フロントエンドサーバー設定
# 注: pidディレクティブはメインのnginx.conf内で定義すべきであり、
# conf.dディレクトリ内のファイルには含めるべきではありません

# バックエンドサービスの定義（resolverを使用してDNS解決の問題を回避）
resolver 127.0.0.11 valid=30s ipv6=off;

server {
    listen 80;
    server_name localhost;

    # バックエンドサービス変数を設定
    set $backend_server "backend";
    set $backend_port "8000";
    set $frontend_server "localhost";
    set $frontend_port "3000";

    # クライアントからのリクエスト本文の最大サイズ
    client_max_body_size 10M;

    # 接続タイムアウト設定
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 75s;
    send_timeout 60s;

    # gzip圧縮設定 - 転送サイズを減らし、読み込み速度を向上させる
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;  # 1KB以上のファイルのみ圧縮
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/xml
        application/json
        font/woff
        font/woff2
        image/svg+xml;
    gzip_disable "MSIE [1-6]\.";  # 古いIEブラウザは圧縮対象外

    # Next.jsアプリケーションへのプロキシ
    location / {
        # Next.jsサーバーが利用できない場合でもエラーを返さないように設定
        proxy_intercept_errors on;
        error_page 502 503 504 = @frontend_fallback;

        # Next.jsアプリケーションにプロキシ
        proxy_pass http://$frontend_server:$frontend_port;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        # プロキシタイムアウト設定
        proxy_connect_timeout 5s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # セキュリティヘッダー
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; connect-src 'self' http://$backend_server:$backend_port https://*.googleapis.com https://*.firebaseio.com https://*.firebase.googleapis.com; script-src 'self' 'unsafe-inline' https://apis.google.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https://*.googleapis.com; font-src 'self' data:;" always;
    }

    # フロントエンドが利用できない場合のフォールバック
    location @frontend_fallback {
        add_header Content-Type text/html;
        return 503 '<!DOCTYPE html><html><head><title>メンテナンス中</title><style>body{font-family:sans-serif;color:#333;margin:40px}</style></head><body><h1>一時的にサービスが利用できません</h1><p>フロントエンドサービスは現在メンテナンス中です。しばらく後で再試行してください。</p></body></html>';
    }

    # APIリクエストのプロキシ設定
    location /api/ {
        # バックエンドサービスが利用できない場合でもエラーを返さないように設定
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_fallback;

        # 変数を使用してホスト名を解決（起動時の依存関係の問題を回避）
        proxy_pass http://$backend_server:$backend_port/api/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        # プロキシタイムアウト設定
        proxy_connect_timeout 5s;  # 短縮して素早く失敗を検出
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # オプション（CORS）リクエストの処理
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=utf-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # バックエンドが利用できない場合のフォールバック
    location @api_fallback {
        add_header Content-Type application/json;
        return 503 '{"error":"バックエンドサービスが現在利用できません。しばらく後で再試行してください。"}';
    }

    # ヘルスチェックエンドポイント
    location /health {
        access_log off;
        return 200 '{"status":"healthy"}';
        default_type application/json;
    }

    # 静的ファイルのキャッシュ設定 - Next.jsの静的アセット用
    location /_next/static/ {
        proxy_pass http://$frontend_server:$frontend_port/_next/static/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;

        expires 1y;  # 1年間キャッシュ可能
        add_header Cache-Control "public, max-age=31536000, immutable";
        access_log off;
    }

    # 静的ファイルのキャッシュ設定 - その他の静的ファイル
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://$frontend_server:$frontend_port;
        proxy_http_version 1.1;
        proxy_set_header Host $host;

        expires 7d;  # 7日間キャッシュ可能
        add_header Cache-Control "public, max-age=604800";
        access_log off;
    }

    # セキュリティ強化: .git、.htaccessなどの隠しファイルにアクセス禁止
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 基本的なアクセスログとエラーログの設定
    access_log /var/log/nginx/access.log combined;
    error_log /var/log/nginx/error.log warn;
}