# Firebase Data Connect 設定ファイル

# 基本設定
main:
  dataconnect:
    specVersion: v1beta
    serviceId: backend
    location: us-central1
    schema:
      source: ./schema
      datasource:
        postgresql:
          database: fdcdb
          cloudSql:
            instanceId: backend-fdc
    connectorDirs:
      - ./connector

  connector:
    connectorId: default

# データモデル定義
models:
  user:
    description: ユーザーテーブル
    definition:
      type: User
      table: true
      fields:
        id:
          type: String
          required: true
          col:
            name: user_auth
        username:
          type: String
          required: true
          col:
            name: username
            dataType: varchar(50)

  movie:
    description: 映画テーブル
    definition:
      type: Movie
      table: true
      fields:
        id:
          type: UUID
          required: true
          default:
            expr: uuidV4()
        title:
          type: String
          required: true
        imageUrl:
          type: String
          required: true
        genre:
          type: String

  movieMetadata:
    description: 映画メタデータテーブル
    definition:
      type: MovieMetadata
      table: true
      fields:
        movie:
          type: Movie
          required: true
          unique: true
        rating:
          type: Float
        releaseYear:
          type: Int
        description:
          type: String

  review:
    description: レビューテーブル
    definition:
      type: Review
      table:
        name: Reviews
        key:
          - movie
          - user
      fields:
        id:
          type: UUID
          required: true
          default:
            expr: uuidV4()
        user:
          type: User
          required: true
        movie:
          type: Movie
          required: true
        rating:
          type: Int
        reviewText:
          type: String
        reviewDate:
          type: Date
          required: true
          default:
            expr: request.time

# クエリ定義
api:
  queries:
    listMovies:
      description: 映画一覧取得（パブリック）
      definition:
        auth:
          level: PUBLIC
        fields:
          movies:
            fields:
              - id
              - title
              - imageUrl
              - genre

    listUserReviews:
      description: ユーザーレビュー一覧（ログインユーザーのみ）
      definition:
        auth:
          level: USER
        fields:
          user:
            key:
              id_expr: auth.uid
            fields:
              - id
              - username
              reviews:
                source: reviews_on_user
                fields:
                  - id
                  - rating
                  - reviewDate
                  - reviewText
                  movie:
                    fields:
                      - id
                      - title

    getMovieById:
      description: 映画詳細取得（パブリック）
      definition:
        auth:
          level: PUBLIC
        parameters:
          id:
            type: UUID
            required: true
        fields:
          movie:
            key: id
            fields:
              - id
              - title
              - imageUrl
              - genre
              metadata:
                source: movieMetadata_on_movie
                fields:
                  - rating
                  - releaseYear
                  - description
              reviews:
                source: reviews_on_movie
                fields:
                  - id
                  - reviewText
                  - reviewDate
                  - rating
                  user:
                    fields:
                      - id
                      - username

    searchMovie:
      description: 映画検索（パブリック）
      definition:
        auth:
          level: PUBLIC
        parameters:
          titleInput:
            type: String
          genre:
            type: String
        fields:
          movies:
            where:
              _and:
                - genre:
                    eq: $genre
                - title:
                    contains: $titleInput
            fields:
              - id
              - title
              - genre
              - imageUrl

  mutations:
    createMovie:
      description: 映画作成（メール確認済みユーザーのみ）
      definition:
        auth:
          level: USER_EMAIL_VERIFIED
        parameters:
          title:
            type: String
            required: true
          genre:
            type: String
            required: true
          imageUrl:
            type: String
            required: true
        fields:
          movie_insert:
            data:
              title: $title
              genre: $genre
              imageUrl: $imageUrl

    upsertUser:
      description: ユーザー情報登録/更新（ログインユーザーのみ）
      definition:
        auth:
          level: USER
        parameters:
          username:
            type: String
            required: true
        fields:
          user_upsert:
            data:
              id_expr: auth.uid
              username: $username

    addReview:
      description: レビュー追加（ログインユーザーのみ）
      definition:
        auth:
          level: USER
        parameters:
          movieId:
            type: UUID
            required: true
          rating:
            type: Int
            required: true
          reviewText:
            type: String
            required: true
        fields:
          review_upsert:
            data:
              userId_expr: auth.uid
              movieId: $movieId
              rating: $rating
              reviewText: $reviewText

    deleteReview:
      description: レビュー削除（ログインユーザーのみ）
      definition:
        auth:
          level: USER
        parameters:
          movieId:
            type: UUID
            required: true
        fields:
          review_delete:
            key:
              userId_expr: auth.uid
              movieId: $movieId

# 認証レベル定義
auth:
  levels:
    public:
      description: 認証の有無に関わらず誰でもアクセス可能
      equivalent: "@auth(expr: 'true')"

    user_anon:
      description: Firebase認証トークンを持つユーザー（匿名含む）
      equivalent: "@auth(expr: 'auth.uid != nil')"

    user:
      description: 非匿名のFirebase認証ユーザー
      equivalent: "@auth(expr: 'auth.uid != nil && auth.token.firebase.sign_in_provider != \"anonymous\"')"

    user_email_verified:
      description: メール検証済みのFirebase認証ユーザー
      equivalent: "@auth(expr: 'auth.uid != nil && auth.token.email_verified')"

    no_access:
      description: アクセス不可（Adminのみ）
      equivalent: "@auth(expr: 'false')"

# データ型定義
types:
  uuid:
    description: RFC4122準拠のUUID
    sqlType: uuid

  string:
    description: テキスト
    sqlType: text

  int:
    description: 整数
    sqlType: int

  int64:
    description: 64ビット整数
    sqlType: bigint

  float:
    description: 浮動小数点数
    sqlType: double precision

  boolean:
    description: 真偽値
    sqlType: boolean

  date:
    description: YYYY-MM-DD形式の日付
    sqlType: date

  timestamp:
    description: RFC 3339形式のタイムスタンプ
    sqlType: timestamptz

  vector:
    description: 浮動小数点数の配列（ベクトル）
    sqlType: pgvector

  any:
    description: 任意のJSON値
    sqlType: jsonb

# ベクトル検索例
examples:
  vectorSearch:
    schema:
      post:
        table: true
        fields:
          content:
            type: String
            required: true
          contentEmbedding:
            type: Vector
            col:
              size: 768

    mutations:
      createPost:
        parameters:
          content:
            type: String
            required: true
        fields:
          post_insert:
            data:
              content: $content
              contentEmbedding_embed:
                model: textembedding-gecko@003
                text: $content

    queries:
      searchPost:
        parameters:
          query:
            type: String
            required: true
        fields:
          posts_contentEmbedding_similarity:
            compare_embed:
              model: textembedding-gecko@003
              text: $query
            fields:
              - id
              - content