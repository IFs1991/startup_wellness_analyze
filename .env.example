# スタートアップウェルネス分析プラットフォーム - 環境設定ファイル
# このファイルを.envにコピーして使用してください

# アプリケーション環境設定
APP_ENV=production                 # production, development, staging
LOG_LEVEL=INFO                     # DEBUG, INFO, WARNING, ERROR, CRITICAL
TAG=latest                         # Dockerイメージのタグ

# 開発モード設定
DEV_MODE=                          # 開発モード有効時は任意の値を設定
USE_EMULATORS=                     # Firebase/Firestoreエミュレーター使用時は任意の値を設定

# GCP設定
GCP_PROJECT_ID=your-project-id     # GCPプロジェクトID
GCP_REGION=asia-northeast1         # GCPリージョン（東京）
GCP_ZONE=asia-northeast1-a         # GCPゾーン

# 東京リージョン割引時間帯設定
DISCOUNT_HOURS_START=22            # 割引開始時間（JST、24時間制）
DISCOUNT_HOURS_END=8               # 割引終了時間（JST、24時間制）
WEEKEND_DISCOUNT=true              # 週末の割引（true/false）

# リソース制限設定
CPU_LIMIT=1.0            # バックエンドのCPU制限
MEMORY_LIMIT=2G          # バックエンドのメモリ制限
CPU_RESERVATION=0.25     # バックエンドのCPU予約
MEMORY_RESERVATION=512M  # バックエンドのメモリ予約

FRONTEND_CPU_LIMIT=0.5   # フロントエンドのCPU制限
FRONTEND_MEMORY_LIMIT=512M  # フロントエンドのメモリ制限

DB_CPU_LIMIT=0.5         # データベースのCPU制限
DB_MEMORY_LIMIT=1G       # データベースのメモリ制限

REDIS_CPU_LIMIT=0.25     # RedisのCPU制限
REDIS_MEMORY_LIMIT=512M  # Redisのメモリ制限
REDIS_MAXMEMORY=256mb    # Redisの最大メモリ使用量
REDIS_MAXMEMORY_POLICY=allkeys-lru  # メモリポリシー (allkeys-lru, volatile-lru, allkeys-random等)

PROMETHEUS_CPU_LIMIT=0.25  # PrometheusのCPU制限
PROMETHEUS_MEMORY_LIMIT=512M  # Prometheusのメモリ制限

GRAFANA_CPU_LIMIT=0.25   # GrafanaのCPU制限
GRAFANA_MEMORY_LIMIT=512M  # Grafanaのメモリ制限

# バックエンド設定
WORKERS=4                          # Uvicornワーカー数
PYTHONOPTIMIZE=1                   # Python最適化レベル（0-2）
BACKEND_PORT=8000                  # バックエンドポート

# フロントエンド設定
NODE_ENV=production                # Node.js環境（production/development）
API_URL=http://backend:8000        # バックエンドAPIのURL
FRONTEND_PORT=3000                 # フロントエンドポート

# モニタリング設定
MONITORING_PORT=9090               # Prometheusポート
PROMETHEUS_VERSION=latest          # Prometheusバージョン

# Firebase/Firestore設定
FIRESTORE_BUCKET_NAME=startup-wellness.appspot.com
GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/startupwellnessanalyze-445505-firebase-adminsdk-2hbn3-dc3bee234b.json

# メモリ最適化設定
MALLOC_TRIM_THRESHOLD_=65536      # Pythonメモリトリミングのしきい値
PYTHONMALLOC=malloc                # Pythonメモリアロケーター

# CPU最適化設定
OMP_NUM_THREADS=4                  # OpenMPスレッド数
MKL_NUM_THREADS=4                  # Intel MKLスレッド数
NUMEXPR_NUM_THREADS=4              # NumExprスレッド数

# ワーカー設定
WORKERS=4                          # Uvicornワーカー数

# データベース設定
POSTGRES_USER=postgres
POSTGRES_PASSWORD=wellness_pass  # 本番環境では強力なパスワードに変更してください
POSTGRES_DB=wellness

# 連合学習設定
FL_MIN_CLIENTS=3       # 連合学習の最小クライアント数
FL_ROUNDS=10           # 連合学習のラウンド数
FL_LOCAL_EPOCHS=5      # ローカルエポック数
FL_BATCH_SIZE=32       # バッチサイズ
FL_LEARNING_RATE=0.01  # 学習率

# モニタリング設定
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=admin  # 本番環境では強力なパスワードに変更してください
MONITORING_PORT=9090               # Prometheusポート

# Dask設定
DASK_DISTRIBUTED__WORKER__MEMORY__TARGET=0.85   # メモリターゲット
DASK_DISTRIBUTED__WORKER__MEMORY__SPILL=0.90    # メモリスピル
DASK_DISTRIBUTED__WORKER__MEMORY__PAUSE=0.95    # メモリ一時停止
DASK_DISTRIBUTED__WORKER__MEMORY__TERMINATE=0.99  # メモリ終了

# ===== データベース設定 =====
DB_HOST=localhost
DB_PORT=5432
DB_NAME=wellness_db
DB_USER=postgres
DB_PASSWORD=your_password

# ===== 認証設定 =====
JWT_SECRET_KEY=your_jwt_secret_key
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30

# ===== サーバー設定 =====
API_HOST=0.0.0.0
API_PORT=8000
FRONTEND_URL=http://localhost:3000

# ===== 生成AI設定 =====
# Google Gemini API設定
# https://makersuite.google.com/ からAPIキーを取得してください
GEMINI_API_KEY=your_gemini_api_key

# ===== クラウドストレージ設定 =====
# Google Cloud Storage設定（オプション）
GOOGLE_STORAGE_BUCKET=your-bucket-name
GOOGLE_APPLICATION_CREDENTIALS=path/to/credentials.json

# ===== メール設定 =====
SMTP_SERVER=smtp.example.com
SMTP_PORT=587
SMTP_USER=your_email@example.com
SMTP_PASSWORD=your_email_password
EMAIL_FROM=noreply@example.com

# ===== ログ設定 =====
LOG_FILE=logs/app.log

# ===== キャッシュ設定 =====
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# ===== セキュリティ設定 =====
CORS_ORIGINS=http://localhost:3000,https://example.com