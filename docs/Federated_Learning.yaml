# スタートアップ分析プラットフォーム: 連合学習システム完全アーキテクチャ

# システム全体の構成
system:
  name: "startup-analytics-platform"
  version: "2.0.0"
  description: "連合学習を活用した高度なスタートアップ分析プラットフォーム"
  environment: "production"
  maintainers:
    - name: "システム管理者"
      email: "admin@example.com"

# データベース構成
databases:
  main:
    type: "postgresql"
    version: "17"
    host: "${DB_HOST}"
    port: 5432
    database: "startup_analytics"
    schema:
      - name: "raw_data"        # 生データを格納
      - name: "anonymized"      # 匿名化されたデータ
      - name: "metadata"        # メタデータリポジトリ
      - name: "benchmarks"      # 業界ベンチマーク
      - name: "ml_models"       # 機械学習モデルとパラメータ
      - name: "federated"       # 連合学習関連データ
    security:
      encryption:
        at_rest: true
        in_transit: true
      access_control:
        role_based: true
        roles:
          - name: "admin"
            permissions: ["read", "write", "create", "delete"]
          - name: "analyst"
            permissions: ["read", "execute_model"]
          - name: "customer"
            permissions: ["read_own"]
          - name: "federated_client"
            permissions: ["read_model", "submit_update"]

# 匿名化モジュール
anonymization:
  module_name: "data_anonymizer"
  techniques:
    - name: "id_hashing"
      algorithm: "sha256"
      salt: "${HASH_SALT}"
    - name: "data_normalization"
      method: "z-score"
    - name: "k_anonymity"
      k_value: 5
    - name: "differential_privacy"
      epsilon: 0.1
      delta: 0.00001
      mechanism: "gaussian"
  database_views:
    - name: "anonymized_financial_data"
      source_table: "raw_data.financial_data"
      sql: |
        CREATE OR REPLACE VIEW anonymized.financial_data AS
        SELECT
          md5(company_id::text || '${HASH_SALT}') AS anonymous_id,
          industry_type,
          company_size_category,
          funding_stage,
          date_trunc('month', report_date) AS report_month,
          revenue / (SELECT AVG(revenue) FROM raw_data.financial_data WHERE date_trunc('year', report_date) = date_trunc('year', fd.report_date)) AS normalized_revenue,
          burn_rate / (SELECT AVG(burn_rate) FROM raw_data.financial_data WHERE date_trunc('year', report_date) = date_trunc('year', fd.report_date)) AS normalized_burn_rate,
          gross_margin,
          customer_acquisition_cost,
          lifetime_value,
          monthly_recurring_revenue,
          churn_rate
        FROM raw_data.financial_data fd;
    - name: "anonymized_vas_data"
      source_table: "raw_data.vas_data"
      sql: |
        CREATE OR REPLACE VIEW anonymized.vas_data AS
        SELECT
          md5(company_id::text || '${HASH_SALT}') AS anonymous_id,
          industry_type,
          role_category,
          date_trunc('month', assessment_date) AS assessment_month,
          COUNT(DISTINCT employee_id) AS employee_count,
          AVG(performance_score) AS avg_performance_score,
          STDDEV(performance_score) AS std_performance_score,
          AVG(health_score) AS avg_health_score,
          STDDEV(health_score) AS std_health_score
        FROM raw_data.vas_data
        GROUP BY
          md5(company_id::text || '${HASH_SALT}'),
          industry_type,
          role_category,
          date_trunc('month', assessment_date);
  update_schedule:
    frequency: "daily"
    time: "01:00"

# メタデータリポジトリ
metadata_repository:
  tables:
    - name: "metadata.financial_metrics"
      columns:
        - name: "metadata_id"
          type: "SERIAL PRIMARY KEY"
        - name: "anonymous_id"
          type: "TEXT"
        - name: "industry_type"
          type: "TEXT"
        - name: "company_size_category"
          type: "TEXT"
        - name: "funding_stage"
          type: "TEXT"
        - name: "metric_name"
          type: "TEXT"
        - name: "metric_value"
          type: "FLOAT"
        - name: "time_period"
          type: "DATE"
        - name: "confidence_score"
          type: "FLOAT"
      indexes:
        - columns: ["anonymous_id"]
        - columns: ["industry_type", "funding_stage"]
        - columns: ["metric_name", "time_period"]
    - name: "metadata.vas_metrics"
      columns:
        - name: "metadata_id"
          type: "SERIAL PRIMARY KEY"
        - name: "anonymous_id"
          type: "TEXT"
        - name: "industry_type"
          type: "TEXT"
        - name: "role_category"
          type: "TEXT"
        - name: "metric_name"
          type: "TEXT"
        - name: "metric_value"
          type: "FLOAT"
        - name: "time_period"
          type: "DATE"
        - name: "sample_size"
          type: "INTEGER"
      indexes:
        - columns: ["anonymous_id"]
        - columns: ["industry_type", "role_category"]
  procedures:
    - name: "update_financial_metadata"
      schedule: "daily"
      sql: |
        CREATE OR REPLACE FUNCTION metadata.update_financial_metadata()
        RETURNS void AS $$
        BEGIN
          TRUNCATE TABLE metadata.financial_metrics;

          INSERT INTO metadata.financial_metrics
            (anonymous_id, industry_type, company_size_category, funding_stage,
            metric_name, metric_value, time_period, confidence_score)
          SELECT
            anonymous_id,
            industry_type,
            company_size_category,
            funding_stage,
            'normalized_revenue' as metric_name,
            normalized_revenue as metric_value,
            report_month as time_period,
            1.0 as confidence_score
          FROM anonymized.financial_data;

          -- 他の指標も同様に挿入
          INSERT INTO metadata.financial_metrics
            (anonymous_id, industry_type, company_size_category, funding_stage,
            metric_name, metric_value, time_period, confidence_score)
          SELECT
            anonymous_id,
            industry_type,
            company_size_category,
            funding_stage,
            'normalized_burn_rate' as metric_name,
            normalized_burn_rate as metric_value,
            report_month as time_period,
            1.0 as confidence_score
          FROM anonymized.financial_data;

          -- 以下同様に各指標を追加
        END;
        $$ LANGUAGE plpgsql;

# 業界ベンチマーク生成
benchmarks:
  materialized_views:
    - name: "benchmarks.financial_benchmarks"
      refresh_schedule: "daily"
      definition: |
        CREATE MATERIALIZED VIEW IF NOT EXISTS benchmarks.financial_benchmarks AS
        SELECT
          industry_type,
          company_size_category,
          funding_stage,
          metric_name,
          AVG(metric_value) AS avg_value,
          PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY metric_value) AS median_value,
          PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY metric_value) AS percentile_25,
          PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY metric_value) AS percentile_75,
          STDDEV(metric_value) AS std_deviation,
          COUNT(DISTINCT anonymous_id) AS company_count
        FROM metadata.financial_metrics
        GROUP BY industry_type, company_size_category, funding_stage, metric_name
        HAVING COUNT(DISTINCT anonymous_id) >= 5;

# 連合学習システム
federated_learning:
  system_architecture:
    type: "cross-silo"  # 企業間での連合学習
    topology: "star"    # 中央サーバーと複数クライアント
    communication: "secure_aggregation"

  # 中央サーバー設定
  central_server:
    name: "federated_aggregation_server"
    framework: "tensorflow_federated"
    version: "0.20.0"
    kubernetes:
      deployment_name: "fl-central-server"
      replicas: 3
      resources:
        cpu: "4"
        memory: "16Gi"
        gpu: "1"
    security:
      authentication:
        client_certificates: true
        token_based: true
      encryption:
        in_transit: true
        model_parameters: true

  # クライアント設定
  client:
    name: "federated_client"
    deployment:
      type: "docker"
      image: "startup-analytics/federated-client:v1.0"
      resources:
        min_cpu: "2"
        min_memory: "4Gi"
    data_access:
      local_only: true
      required_tables:
        - "raw_data.financial_data"
        - "raw_data.vas_data"
    security:
      model_isolation:
        containerized: true
        memory_protection: true

  # モデル設定
  models:
    - name: "financial_performance_predictor"
      type: "bayesian_neural_network"
      framework: "tensorflow_probability"
      architecture:
        input_dim: 25
        hidden_layers: [64, 32, 16]
        output_dim: 5
        activation: "relu"
        final_activation: "linear"
      training:
        loss: "mean_squared_error"
        optimizer: "adam"
        learning_rate: 0.001
        local_epochs: 5
        batch_size: 32
      federated_settings:
        aggregation_method: "federated_averaging"
        min_clients_per_round: 3
        client_sampling_rate: 0.8
        communication_rounds: 50
        convergence_criteria:
          metric: "validation_loss"
          patience: 5
          min_delta: 0.001

    - name: "team_health_predictor"
      type: "bayesian_neural_network"
      framework: "tensorflow_probability"
      architecture:
        input_dim: 15
        hidden_layers: [32, 16]
        output_dim: 3
        activation: "relu"
        final_activation: "linear"
      training:
        loss: "mean_squared_error"
        optimizer: "adam"
        learning_rate: 0.001
        local_epochs: 5
        batch_size: 32
      federated_settings:
        aggregation_method: "federated_averaging"
        min_clients_per_round: 3
        client_sampling_rate: 0.8
        communication_rounds: 50

  # 差分プライバシー設定
  differential_privacy:
    enabled: true
    mechanism: "gaussian"
    client_level:
      noise_multiplier: 1.1
      l2_norm_clip: 3.0
      target_epsilon: 3.0
      target_delta: 1e-5
    model_level:
      enabled: true
      epsilon_per_round: 0.1

  # セキュア集約設定
  secure_aggregation:
    enabled: true
    protocol: "secure_sum"
    crypto_provider: "paillier"
    key_rotation:
      frequency: "daily"
      storage: "vault"

  # 連合学習データベース設定
  database:
    tables:
      - name: "federated.model_registry"
        columns:
          - name: "model_id"
            type: "SERIAL PRIMARY KEY"
          - name: "model_name"
            type: "TEXT"
          - name: "version"
            type: "TEXT"
          - name: "created_at"
            type: "TIMESTAMP"
          - name: "status"
            type: "TEXT"
          - name: "metrics"
            type: "JSONB"
          - name: "parameters_location"
            type: "TEXT"
          - name: "client_count"
            type: "INTEGER"
          - name: "rounds_completed"
            type: "INTEGER"
      - name: "federated.client_registry"
        columns:
          - name: "client_id"
            type: "TEXT PRIMARY KEY"
          - name: "client_name"
            type: "TEXT"
          - name: "industry_type"
            type: "TEXT"
          - name: "data_size"
            type: "INTEGER"
          - name: "last_active"
            type: "TIMESTAMP"
          - name: "models_participated"
            type: "JSONB"
      - name: "federated.training_rounds"
        columns:
          - name: "round_id"
            type: "SERIAL PRIMARY KEY"
          - name: "model_id"
            type: "INTEGER REFERENCES federated.model_registry(model_id)"
          - name: "round_number"
            type: "INTEGER"
          - name: "started_at"
            type: "TIMESTAMP"
          - name: "completed_at"
            type: "TIMESTAMP"
          - name: "client_count"
            type: "INTEGER"
          - name: "metrics"
            type: "JSONB"
          - name: "aggregation_method"
            type: "TEXT"

  # 連合学習APIエンドポイント
  api:
    - path: "/api/v1/federated/models"
      method: "GET"
      description: "利用可能なモデル一覧の取得"
      authentication: true
    - path: "/api/v1/federated/models/{model_id}/download"
      method: "GET"
      description: "最新のグローバルモデルをダウンロード"
      authentication: true
    - path: "/api/v1/federated/models/{model_id}/update"
      method: "POST"
      description: "ローカルで訓練したモデル更新を提出"
      authentication: true
      rate_limit: 10
    - path: "/api/v1/federated/status"
      method: "GET"
      description: "現在の訓練ステータスを確認"
      authentication: true

  # モデル評価と検証
  evaluation:
    metrics:
      - name: "mse"
        description: "Mean Squared Error"
      - name: "mae"
        description: "Mean Absolute Error"
      - name: "r2"
        description: "R-squared"
    validation:
      global_validation:
        enabled: true
        holdout_data_source: "validation_dataset"
        frequency: "every_round"
      local_validation:
        enabled: true
        cross_validation_folds: 5
        metrics_aggregation: "secure_aggregation"

# オーケストレーションとワークフロー
orchestration:
  workflow_manager:
    type: "airflow"
    version: "2.3.0"
    dags:
      - name: "federated_learning_workflow"
        schedule: "0 1 * * 1"  # 毎週月曜日午前1時
        tasks:
          - name: "prepare_global_model"
            type: "python_operator"
            python_callable: "prepare_global_model"
          - name: "notify_clients"
            type: "http_operator"
            endpoint: "/api/notify/training_round"
            dependencies: ["prepare_global_model"]
          - name: "wait_for_client_updates"
            type: "sensor_operator"
            mode: "poke"
            timeout: 86400  # 24時間
            dependencies: ["notify_clients"]
          - name: "aggregate_model_updates"
            type: "python_operator"
            python_callable: "aggregate_model_updates"
            dependencies: ["wait_for_client_updates"]
          - name: "evaluate_global_model"
            type: "python_operator"
            python_callable: "evaluate_global_model"
            dependencies: ["aggregate_model_updates"]
          - name: "register_model_version"
            type: "python_operator"
            python_callable: "register_model_version"
            dependencies: ["evaluate_global_model"]
      - name: "model_deployment_workflow"
        schedule: "0 3 * * 2"  # 毎週火曜日午前3時
        tasks:
          - name: "validate_latest_model"
            type: "python_operator"
            python_callable: "validate_latest_model"
          - name: "canary_deployment"
            type: "kubernetes_operator"
            action: "apply"
            manifest: "k8s/canary_model_deployment.yaml"
            dependencies: ["validate_latest_model"]
          - name: "monitor_canary"
            type: "sensor_operator"
            mode: "poke"
            timeout: 3600  # 1時間
            dependencies: ["canary_deployment"]
          - name: "full_deployment"
            type: "kubernetes_operator"
            action: "apply"
            manifest: "k8s/full_model_deployment.yaml"
            dependencies: ["monitor_canary"]

# モデルサービング
model_serving:
  framework: "tensorflow_serving"
  version: "2.8.0"
  deployment:
    type: "kubernetes"
    service_name: "model-serving"
    replicas: 3
    autoscaling:
      enabled: true
      min_replicas: 2
      max_replicas: 10
      target_cpu_utilization: 70
    resources:
      cpu: "2"
      memory: "4Gi"
      gpu: "1"
  monitoring:
    prometheus_integration: true
    metrics:
      - "prediction_latency"
      - "throughput"
      - "error_rate"
  endpoints:
    - path: "/v1/models/{model_name}:predict"
      method: "POST"
      description: "モデル予測API"
      authentication: true
      rate_limit: 100
    - path: "/v1/models/{model_name}/metadata"
      method: "GET"
      description: "モデルメタデータ取得API"
      authentication: true

# セキュリティと暗号化
security:
  encryption:
    data_at_rest:
      provider: "postgresql_pgcrypto"
      key_management: "aws_kms"
    model_parameters:
      algorithm: "AES-256-GCM"
      key_rotation: "weekly"
  authentication:
    service_accounts:
      provider: "kubernetes_service_account"
      jwt_validation: true
    client_authentication:
      certificate_based: true
      token_based: true
      multi_factor: true
  network_security:
    tls_required: true
    tls_version: "1.3"
    mutual_tls: true
    ip_allowlist: true
  model_protection:
    tamper_detection: true
    inference_monitoring: true
    adversarial_detection: true

# モニタリングと通知
monitoring:
  federated_learning_metrics:
    - name: "client_participation_rate"
      description: "連合学習ラウンドに参加したクライアントの割合"
      warning_threshold: 0.7
      critical_threshold: 0.5
    - name: "model_convergence_rate"
      description: "モデル収束の速度"
      warning_threshold: 0.01
      critical_threshold: 0.005
    - name: "cross_client_variance"
      description: "クライアント間のモデル更新の分散"
      warning_threshold: 0.2
      critical_threshold: 0.4
  alerting:
    providers:
      - type: "slack"
        webhook: "${SLACK_WEBHOOK_URL}"
      - type: "email"
        recipients: ["alerts@example.com"]
    rules:
      - name: "low_client_participation"
        condition: "client_participation_rate < 0.7"
        severity: "warning"
        message: "連合学習の参加クライアント率が低下しています"
      - name: "model_divergence"
        condition: "cross_client_variance > 0.3"
        severity: "critical"
        message: "クライアント間のモデル分散が大きくなっています"

# 展開とスケーリング計画
deployment:
  infrastructure:
    provider: "kubernetes"
    regions:
      - name: "tokyo"
        primary: true
      - name: "osaka"
        disaster_recovery: true
    networking:
      load_balancer: "nginx_ingress"
      service_mesh: "istio"
  scaling:
    central_server:
      auto_scaling:
        enabled: true
        min_replicas: 3
        max_replicas: 10
    client_onboarding:
      max_clients_per_month: 50
      automated_provisioning: true
      self_service_portal: true

# 実装タイムライン
implementation_timeline:
  phases:
    - name: "Phase 1: 基本データ匿名化とメタデータシステム"
      duration: "4週間"
      tasks:
        - "PostgreSQL匿名化ビューの作成"
        - "メタデータリポジトリ構築"
        - "ベンチマーク自動生成"
        - "初期APIエンドポイント"
    - name: "Phase 2: 連合学習フレームワーク基盤"
      duration: "6週間"
      tasks:
        - "TensorFlow Federated環境構築"
        - "クライアントライブラリ開発"
        - "セキュアアグリゲーション実装"
        - "差分プライバシーフレームワーク実装"
      dependencies: ["Phase 1"]
    - name: "Phase 3: モデル開発と訓練パイプライン"
      duration: "4週間"
      tasks:
        - "ベイジアンニューラルネットワークモデル開発"
        - "連合訓練ワークフロー実装"
        - "モデル評価フレームワーク構築"
        - "Airflowパイプライン構築"
      dependencies: ["Phase 2"]
    - name: "Phase 4: セキュリティ強化とスケーリング"
      duration: "3週間"
      tasks:
        - "暗号化層の実装"
        - "クライアント認証システム"
        - "モデル保護メカニズム"
        - "スケーリング設定"
      dependencies: ["Phase 3"]
    - name: "Phase 5: モデルサービングとモニタリング"
      duration: "3週間"
      tasks:
        - "TensorFlow Servingデプロイ"
        - "モニタリングシステム構築"
        - "アラートとダッシュボード"
        - "パフォーマンス最適化"
      dependencies: ["Phase 4"]
    - name: "Phase 6: 本番リリースとクライアントオンボーディング"
      duration: "4週間"
      tasks:
        - "本番環境デプロイ"
        - "クライアントオンボーディング自動化"
        - "ドキュメント作成"
        - "サポート体制構築"
      dependencies: ["Phase 5"]
  total_duration: "24週間"

# 予想されるROI
roi_estimation:
  implementation_cost:
    development: "高（連合学習の専門知識が必要）"
    infrastructure: "中～高（クラウドリソースが必要）"
    timeline: "6ヶ月（完全実装）"
  expected_benefits:
    prediction_accuracy_improvement: "40-50%（単一企業データと比較）"
    privacy_protection: "大幅に向上（生データ共有が不要）"
    data_efficiency: "5-10倍（メタデータのみの場合と比較）"
    competitive_advantage: "非常に高い（技術的障壁を構築）"
  breakeven_point: "導入後18-24ヶ月"
  scaling_economics:
    client_addition_cost: "逓減（システム構築後は低コスト）"
    accuracy_improvement_per_client: "対数的に向上（10社:20%、50社:35%、100社:45%）"