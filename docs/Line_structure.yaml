src:
  structure.yaml:
    content: |-
      LINE連携とQRコード活用によるクレジット管理システム

      概要:
      - Startup Wellnessのサービスにおいて、VC企業とそのポートフォリオ企業向けの施術クレジット管理を効率化し、ユーザー体験を向上させる。
      - LINE連携とQRコードを活用した管理システムを構築する。

      目的:
      - クレジット管理の効率化: VC企業とポートフォリオ企業間のクレジット管理を自動化し、手作業によるミスを削減する。
      - ユーザー体験の向上: LINEを通じた直感的な操作で、予約、クレジット確認、健康管理を可能にする。
      - データ駆動型の意思決定: クレジット利用状況、施術データ、健康データを分析し、サービス改善に役立てる。

      システムアーキテクチャ:
      - クラウドインフラストラクチャ（GCP）をベースに、既存のSaaSプラットフォームと連携する。
      - LINE APIを活用したフロントエンドと、Firestore/Cloud SQLを活用したバックエンドで構成される。

      機能:
      - LINE連携機能: LINE公式アカウント、認証連携、通知システム
      - QRコードクレジット管理: QRコード生成、スキャンシステム、クレジット消費記録
      - 予約管理機能: LINE予約システム、変更・キャンセル、グループ・チーム予約
      - クレジット管理機能: VC管理者向けダッシュボード、ポートフォリオ企業担当者向け機能、クレジットポリシー設定
      - 健康データ連携機能: LINE健康データ収集、データ統合と分析、フィードバックループ
      - LINE Pay決済連携: 追加クレジット購入、決済管理

      非機能要件:
      - パフォーマンス: 高速な応答時間、高いシステム稼働率
      - セキュリティ: データの暗号化、不正利用検知、アクセス権限管理
      - 拡張性: 将来的なユーザー数増加、機能追加に対応可能
      - 可用性: オフライン時の機能提供、障害時の迅速な復旧

      ユーザーエクスペリエンス:
      - ユーザーフロー設計: 初回登録から施術予約までの最短パス設計、パーソナライズドUI
      - UIデザイン要件: LINE公式アカウントのデザインガイドライン準拠、ブランドカラー統一、アクセシビリティ対応、多言語対応
      - 通知設計: 通知頻度の最適化、個人設定オプション、メッセージのトーン統一、アクションボタン付きリッチメッセージ

      システム統合:
      - 既存システムとの連携: SaaSプラットフォーム、データベース、施術予約システムとのAPIベース連携
      - 外部サービス連携: LINE Messaging API, LINE Login API, LINE Pay API, Google Calendar API

      データモデル:
      - LINE連携テーブル: line_users
      - クレジット管理テーブル: credit_management, credit_transactions
      - QRコード管理テーブル: qr_codes

      実装フェーズ:
      - フェーズ1: 基盤構築 (8週間)
      - フェーズ2: コア機能実装 (10週間)
      - フェーズ3: 拡張機能実装 (6週間)
      - フェーズ4: テスト・最適化 (4週間)
      - フェーズ5: 導入・運用開始 (2週間)

      テスト計画:
      - テスト範囲: 単体テスト、統合テスト、パフォーマンステスト、セキュリティテスト、ユーザビリティテスト
      - テスト環境: 開発環境、ステージング環境、LINE Sandbox
      - 主要テストケース: LINE連携認証、QRコード認証、クレジット消費、予約フロー、高負荷時応答性、障害時リカバリー

      障害対策・運用計画:
      - 障害対策: LINE API障害時の代替手段、オフライン認証、データバックアップ、障害検知
      - 運用体制: LINE公式アカウント管理者、クレジット管理責任者、ユーザーサポート、定期メンテナンス
      - モニタリング指標: LINE連携成功率、QRコード認証成功率、クレジット処理正確性、システム応答時間、ユーザー満足度

      期待される効果:
      - ユーザー体験の向上: 直感的なLINE操作による利便性向上
      - 運用効率の改善: クレジット管理の自動化による管理コスト80%削減
      - データ精度の向上: 自動記録による施術データの正確性確保
      - 利用率の向上: アクセシビリティ向上によるクレジット利用率30%増加
      - 満足度向上: スムーズなユーザーフローによるNPS20ポイント向上

      リスク分析と対策:
      - LINE API仕様変更: APIバージョン管理、変更監視体制
      - QRコード不正利用: 暗号化、有効期限設定、使用履歴監査
      - データ同期遅延: 冗長系統、オフラインキャッシュ
      - ユーザー抵抗感: 段階的導入、トレーニング提供
      - システム障害: バックアップ手順、手動代替フロー

      agent選定理由: claude-3-5-sonnet-20241022は、要件定義書の内容を正確に理解し、構造化されたYAML形式で出力する能力に優れています。また、各機能の詳細な説明、非機能要件、テスト計画、運用計画など、プロジェクトの全体像を把握し、網羅的に記述することができます。さらに、文章の生成能力も高く、contentの内容を詳細かつ明確に記述できます。
      api選定理由: 特になし
    dependency: []
    agent: "claude-3-7-sonnet-20250219"
    api: []
  api:
    line:
      line_api.ts:
        content: |-
          LINE Messaging APIとの連携を実装するクラス
          - メッセージ送受信
          - リッチメニュー操作
          - ユーザープロフィール取得
          - Messaging APIのイベントハンドリング
          - エラーハンドリングとリトライ処理
          - 認証情報の管理と更新
          - ログ出力とモニタリング
          - ユニットテストと結合テスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、LINE Messaging APIとの連携に必要な複雑な処理を実装するのに適しています。APIの仕様を理解し、適切なリクエストを生成し、レスポンスを処理する能力が必要です。また、エラーハンドリングやリトライ処理、認証情報の管理など、信頼性の高いAPI連携を実装するための高度な知識が求められます。
          api選定理由: LINE Messaging APIは、LINEプラットフォームとの連携を実現するための主要なAPIです。メッセージの送受信、リッチメニューの操作、ユーザープロフィールの取得など、LINE公式アカウントの機能を活用するために必要です。
        dependency:
          - src/config/.env
          - src/config/.env.development
          - src/config/.env.production
          - src/config/.env.staging
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: "LINE Messaging API"
      line_login_api.ts:
        content: |-
          LINE Login APIとの連携を実装するクラス
          - ユーザー認証
          - アクセストークン取得
          - プロフィール情報取得
          - 認可フローの実装
          - エラーハンドリング
          - セキュリティ対策（CSRF対策など）
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、LINE Login APIとの連携に必要な認証フロー、アクセストークンの管理、セキュリティ対策などを実装するのに適しています。OAuth 2.0やOpenID Connectなどの認証プロトコルに関する知識と、セキュアなコーディングのスキルが求められます。
          api選定理由: LINE Login APIは、LINEアカウントを使用したユーザー認証を実現するためのAPIです。ユーザーはLINEアカウントで簡単にログインできるようになり、利便性が向上します。また、LINEのユーザー情報を取得し、サービスに連携することができます。
        dependency:
          - src/config/.env
          - src/config/.env.development
          - src/config/.env.production
          - src/config/.env.staging
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: "LINE Login API"
  backend:
    controllers:
      credit_controller.ts:
        content: |-
          クレジット管理に関するコントローラー
          - クレジットの割り当て
          - クレジットの使用
          - クレジット残高の確認
          - クレジット履歴の取得
          - クレジットの有効期限管理
          - エラーハンドリング
          - 認証と認可
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、クレジット管理に関する複雑なビジネスロジックを実装するのに適しています。クレジットの割り当て、使用、残高確認、有効期限管理など、様々な処理を正確に実行する必要があります。また、エラーハンドリングや認証・認可、ログ出力など、信頼性と安全性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/credit_model.ts
          - src/backend/services/credit_service.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      qr_code_controller.ts:
        content: |-
          QRコード管理に関するコントローラー
          - QRコードの生成
          - QRコードの検証
          - QRコードの無効化
          - QRコード情報の取得
          - エラーハンドリング
          - 認証と認可
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、QRコードの生成、検証、無効化など、QRコード管理に関する処理を実装するのに適しています。QRコードの仕様を理解し、適切なライブラリを選択し、セキュアなQRコードを生成する必要があります。また、エラーハンドリングや認証・認可、ログ出力など、信頼性と安全性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/qr_code_model.ts
          - src/backend/services/qr_code_service.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      reservation_controller.ts:
        content: |-
          予約管理に関するコントローラー
          - 予約の作成
          - 予約の変更
          - 予約のキャンセル
          - 予約情報の取得
          - 空き状況の確認
          - エラーハンドリング
          - 認証と認可
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、予約の作成、変更、キャンセル、空き状況の確認など、予約管理に関する処理を実装するのに適しています。予約システムの状態遷移を正しく管理し、矛盾のない予約データを作成する必要があります。また、エラーハンドリングや認証・認可、ログ出力など、信頼性と安全性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/reservation_model.ts
          - src/backend/services/reservation_service.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      user_controller.ts:
        content: |-
          ユーザー管理に関するコントローラー
          - ユーザーの登録
          - ユーザー情報の取得
          - ユーザー情報の更新
          - ユーザーの削除
          - 認証と認可
          - エラーハンドリング
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、ユーザーの登録、情報取得、更新、削除など、ユーザー管理に関する処理を実装するのに適しています。ユーザー情報を安全に管理し、個人情報保護に関する規制を遵守する必要があります。また、認証・認可、エラーハンドリング、ログ出力など、信頼性と安全性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/user_model.ts
          - src/backend/services/user_service.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
    models:
      credit_model.ts:
        content: |-
          クレジット管理に関するデータモデル
          - クレジットID
          - VC ID
          - ポートフォリオ企業ID
          - 割り当てクレジット数
          - 使用済みクレジット数
          - 残りクレジット数
          - 有効期限
          - 最終更新日時
          - バリデーションルール
          - データベースとのマッピング
          - 関連するモデルとのリレーションシップ
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、クレジット管理に必要なデータ項目を定義し、適切なデータ型を選択し、バリデーションルールを設定するのに適しています。データベースの設計に関する知識と、データモデリングのスキルが求められます。また、関連するモデルとのリレーションシップを定義し、データの整合性を保つ必要があります。
          api選定理由: 特になし
        dependency:
          - src/database/migrations/create_credit_management_table.ts
          - src/database/migrations/create_credit_transactions_table.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      qr_code_model.ts:
        content: |-
          QRコード管理に関するデータモデル
          - QRコードID
          - ユーザーID
          - 企業ID
          - QRコードの種類（単回使用、永続）
          - クレジット値
          - 作成日時
          - 有効期限
          - 使用日時
          - 使用者（スタッフID）
          - ステータス（有効、使用済み、期限切れ、キャンセル済み）
          - バリデーションルール
          - データベースとのマッピング
          - 関連するモデルとのリレーションシップ
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、QRコード管理に必要なデータ項目を定義し、適切なデータ型を選択し、バリデーションルールを設定するのに適しています。データベースの設計に関する知識と、データモデリングのスキルが求められます。また、関連するモデルとのリレーションシップを定義し、データの整合性を保つ必要があります。
          api選定理由: 特になし
        dependency:
          - src/database/migrations/create_qr_codes_table.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      reservation_model.ts:
        content: |-
          予約管理に関するデータモデル
          - 予約ID
          - ユーザーID
          - 施術ID
          - 予約日時
          - 施術時間
          - 担当者ID
          - ステータス（予約済み、キャンセル済み、完了済み）
          - 予約メモ
          - 作成日時
          - 更新日時
          - バリデーションルール
          - データベースとのマッピング
          - 関連するモデルとのリレーションシップ
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、予約管理に必要なデータ項目を定義し、適切なデータ型を選択し、バリデーションルールを設定するのに適しています。データベースの設計に関する知識と、データモデリングのスキルが求められます。また、関連するモデルとのリレーションシップを定義し、データの整合性を保つ必要があります。
          api選定理由: 特になし
        dependency: []
        agent: "claude-3-7-sonnet-20250219"
        api: []
      user_model.ts:
        content: |-
          ユーザー管理に関するデータモデル
          - ユーザーID
          - LINEユーザーID
          - 企業ID
          - 氏名
          - メールアドレス
          - パスワード（ハッシュ化）
          - 権限（管理者、一般ユーザーなど）
          - 登録日時
          - 更新日時
          - バリデーションルール
          - データベースとのマッピング
          - 関連するモデルとのリレーションシップ
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、ユーザー管理に必要なデータ項目を定義し、適切なデータ型を選択し、バリデーションルールを設定するのに適しています。データベースの設計に関する知識と、データモデリングのスキルが求められます。また、関連するモデルとのリレーションシップを定義し、データの整合性を保つ必要があります。
          api選定理由: 特になし
        dependency:
          - src/database/migrations/create_users_table.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
    services:
      credit_service.ts:
        content: |-
          クレジット管理に関するビジネスロジックを実装するサービスクラス
          - クレジットの割り当てロジック
          - クレジットの使用ロジック
          - クレジット残高の計算ロジック
          - クレジット履歴の記録ロジック
          - クレジットの有効期限管理ロジック
          - エラーハンドリング
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、クレジット管理に関する複雑なビジネスロジックを実装するのに適しています。クレジットの割り当て、使用、残高計算、有効期限管理など、様々な処理を正確に実行する必要があります。また、エラーハンドリングやログ出力など、信頼性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/credit_model.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      qr_code_service.ts:
        content: |-
          QRコード管理に関するビジネスロジックを実装するサービスクラス
          - QRコードの生成ロジック（ライブラリの選定と利用）
          - QRコードの検証ロジック
          - QRコードの無効化ロジック
          - QRコード情報の取得ロジック
          - エラーハンドリング
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、QRコードの生成、検証、無効化など、QRコード管理に関するビジネスロジックを実装するのに適しています。QRコードの仕様を理解し、適切なライブラリを選択し、セキュアなQRコードを生成する必要があります。また、エラーハンドリングやログ出力など、信頼性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/qr_code_model.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      reservation_service.ts:
        content: |-
          予約管理に関するビジネスロジックを実装するサービスクラス
          - 予約の作成ロジック
          - 予約の変更ロジック
          - 予約のキャンセルロジック
          - 予約情報の取得ロジック
          - 空き状況の確認ロジック
          - エラーハンドリング
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、予約の作成、変更、キャンセル、空き状況の確認など、予約管理に関するビジネスロジックを実装するのに適しています。予約システムの状態遷移を正しく管理し、矛盾のない予約データを作成する必要があります。また、エラーハンドリングやログ出力など、信頼性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/reservation_model.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
      user_service.ts:
        content: |-
          ユーザー管理に関するビジネスロジックを実装するサービスクラス
          - ユーザーの登録ロジック
          - ユーザー情報の取得ロジック
          - ユーザー情報の更新ロジック
          - ユーザーの削除ロジック
          - パスワードのハッシュ化
          - 認証と認可
          - エラーハンドリング
          - ログ出力
          - ユニットテスト
          - ドキュメントの整備
          agent選定理由: gpt-4oは、ユーザーの登録、情報取得、更新、削除など、ユーザー管理に関するビジネスロジックを実装するのに適しています。ユーザー情報を安全に管理し、個人情報保護に関する規制を遵守する必要があります。また、パスワードのハッシュ化、認証・認可、エラーハンドリング、ログ出力など、信頼性と安全性の高いシステムを構築するための知識が求められます。
          api選定理由: 特になし
        dependency:
          - src/backend/models/user_model.ts
          - src/utils/logger.ts
        agent: "claude-3-7-sonnet-20250219"
        api: []
  cicd:
    .gitlab-ci.yml:
      content: |-
        CI/CDパイプラインの設定ファイル
        - 静的解析
        - 単体テスト
        - 統合テスト
        - ステージング環境へのデプロイ
        - 本番環境へのデプロイ
        - ロールバック
        - 通知
        - 環境変数の管理
        - ジョブの依存関係
        - キャッシュ
        - アーティファクト
        - スケジュール実行
        - 手動実行
        - セキュリティスキャン
        - パフォーマンス測定
        - ドキュメントの整備
        agent選定理由: gpt-4oは、CI/CDパイプラインの設定ファイルを記述するのに適しています。静的解析、単体テスト、統合テスト、デプロイ、ロールバック、通知など、CI/CDのベストプラクティスを理解し、適切な設定を行う必要があります。また、環境変数の管理、ジョブの依存関係、キャッシュ、アーティファクトなど、CI/CDパイプラインの最適化に関する知識も求められます。
        api選定理由: 特になし
      dependency:
        - src/tests/**/*
        - src/config/.env.development
        - src/config/.env.staging
        - src/config/.env.production
      agent: "claude-3-7-sonnet-20250219"
      api: []
  config:
    .env:
      content: |-
        # 共通の環境変数
        DATABASE_URL=your_database_url
        LINE_CHANNEL_SECRET=your_line_channel_secret
        LINE_CHANNEL_ACCESS_TOKEN=your_line_channel_access_token
        LINE_PAY_CHANNEL_SECRET_KEY=your_line_pay_channel_secret_key
        LINE_PAY_CHANNEL_ID=your_line_pay_channel_id
        GOOGLE_APPLICATION_CRED