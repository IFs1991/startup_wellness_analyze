# スタートアップウェルネス分析システム
# 複数コンテナで構成されるアプリケーションの定義

services:
  # バックエンドAPI - FastAPIベースのRESTful APIサーバー
  backend:
    build:
      context: ./backend     # backendディレクトリをコンテキストに
      dockerfile: Dockerfile # backendディレクトリのDockerfileを使用
    image: startup-wellness-backend:latest
    container_name: startup-wellness-backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/app/.env # 正しい.envファイルの場所に修正
    volumes:
      # .env ファイルのマウント (読み取り専用) - コンテナ内のパスも修正
      - ./backend/app/.env:/app/backend/app/.env:ro
      # Google Cloud 認証情報ファイルのマウント (読み取り専用)
      # ホスト側のパスは実際のファイルパスに合わせてください
      - ./credentials/startupwellnessanalyze-445505-bf8634fbd5f3.json:/app/credentials/startupwellnessanalyze-445505-bf8634fbd5f3.json:ro
      # 永続データ用 (必要に応じて)
      # - ./data:/app/data
      # 開発時のコード同期用マウント (必要ならコメント解除)
      # - ./backend:/app/backend
    depends_on:
      postgres:
        condition: service_healthy
      startup-wellness-redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "${CPU_LIMIT:-1.0}"
          memory: "${MEMORY_LIMIT:-2G}"
        reservations:
          cpus: "${CPU_RESERVATION:-0.25}"
          memory: "${MEMORY_RESERVATION:-512M}"
    healthcheck:
      # /health エンドポイントを使用
      test: ["CMD", "curl", "-f", "http://localhost:8000/health", "||", "exit", "0"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s # アプリ起動時間を考慮
    restart: unless-stopped

  # フロントエンドアプリケーション - Vite+React/TypeScriptベースのSPA
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # ビルド時引数は .env から渡すのが一般的
        - NODE_ENV=${NODE_ENV:-production}
        - VITE_API_URL=${VITE_API_URL:-http://backend:8000/api}
        - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
        - VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN}
        - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
        - VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET}
        - VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID}
        - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
        - VITE_FIREBASE_MEASUREMENT_ID=${VITE_FIREBASE_MEASUREMENT_ID}
    image: startup-wellness-frontend:latest
    container_name: startup-wellness-frontend
    ports:
      - "3000:80" # Nginxが80番で動いている想定
    # --- ↓ 開発時のみマウント (本番ではコメントアウトまたは削除) ---
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules # node_modules はコンテナ内のものを使う
    # --- ↑ 開発時のみマウント ---
    environment:
      # アプリケーション設定 (ビルド時引数と同じ値を設定することが多い)
      - VITE_API_URL=${VITE_API_URL:-http://backend:8000/api}
      - NODE_ENV=${NODE_ENV:-production}
      - TZ=Asia/Tokyo
      - DEV_MODE=${DEV_MODE:-true}
      # Firebase環境変数 (ビルド時引数と同じ値を設定することが多い)
      - VITE_FIREBASE_API_KEY=${VITE_FIREBASE_API_KEY}
      - VITE_FIREBASE_AUTH_DOMAIN=${VITE_FIREBASE_AUTH_DOMAIN}
      - VITE_FIREBASE_PROJECT_ID=${VITE_FIREBASE_PROJECT_ID}
      - VITE_FIREBASE_STORAGE_BUCKET=${VITE_FIREBASE_STORAGE_BUCKET}
      - VITE_FIREBASE_MESSAGING_SENDER_ID=${VITE_FIREBASE_MESSAGING_SENDER_ID}
      - VITE_FIREBASE_APP_ID=${VITE_FIREBASE_APP_ID}
      - VITE_FIREBASE_MEASUREMENT_ID=${VITE_FIREBASE_MEASUREMENT_ID}
      # Nginxのチューニングパラメーター (必要に応じて .env で設定)
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
      - NGINX_WORKER_RLIMIT_NOFILE=4096
      # メモリ最適化設定
      - MALLOC_TRIM_THRESHOLD_=65536
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80", "||", "exit", "0"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "${FRONTEND_CPU_LIMIT:-0.5}"
          memory: "${FRONTEND_MEMORY_LIMIT:-512M}"
        reservations:
          cpus: "${FRONTEND_CPU_RESERVATION:-0.1}"
          memory: "${FRONTEND_MEMORY_RESERVATION:-128M}"

  # 開発環境でのみ有効なモニタリングサービス
  monitoring:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: startup-wellness-monitoring
    ports:
      - "${MONITORING_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    profiles: # monitoring または dev プロファイルが有効な場合に起動
      - monitoring
      - dev
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "${MONITORING_CPU_LIMIT:-0.25}"
          memory: "${MONITORING_MEMORY_LIMIT:-256M}"
        reservations:
          cpus: "${MONITORING_CPU_RESERVATION:-0.1}"
          memory: "${MONITORING_MEMORY_RESERVATION:-64M}"
    restart: unless-stopped

  # PostgreSQLデータベース
  postgres:
    image: postgres:15-alpine
    container_name: startup-wellness-postgres
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-1spel!2stack3win}
      - POSTGRES_DB=${POSTGRES_DB:-startup_wellness_analyze}
      - TZ=Asia/Tokyo
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "${POSTGRES_CPU_LIMIT:-0.5}"
          memory: "${POSTGRES_MEMORY_LIMIT:-512M}"
        reservations:
          cpus: "${POSTGRES_CPU_RESERVATION:-0.1}"
          memory: "${POSTGRES_MEMORY_RESERVATION:-128M}"

  # Redisキャッシュサーバー
  startup-wellness-redis: # サービス名を修正 (ハイフン)
    image: redis:alpine
    container_name: startup-wellness-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: "${REDIS_CPU_LIMIT:-0.25}"
          memory: "${REDIS_MEMORY_LIMIT:-256M}"
        reservations:
          cpus: "${REDIS_CPU_RESERVATION:-0.05}"
          memory: "${REDIS_MEMORY_RESERVATION:-64M}"

# ボリューム定義
volumes:
  # backend_data: # backend でマウントしていないので不要かも
  #   driver: local
  prometheus_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

# ネットワーク設定
networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450  # GCPのネットワークに最適化