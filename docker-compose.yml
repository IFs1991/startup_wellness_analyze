# docker-compose.yml
services:
  # フロントエンドサービス
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - backend
    volumes:
      # 開発環境でのソースコード変更の反映
      - type: bind
        source: ./frontend
        target: /app
      # node_modulesはコンテナ内のものを使用
      - /app/node_modules
      - /app/dist
      # 認証情報のマウント
      - type: bind
        source: ./credentials
        target: /app/credentials
        read_only: true
    environment:
      - NODE_ENV=development
    healthcheck:
      test: wget -q --spider http://localhost:80 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - frontend_network
      - backend_network

  # バックエンドサービス
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
    volumes:
      - type: bind
        source: ./backend
        target: /app
      - /app/venv
      - /app/.venv
      - /app/pycache
      - type: bind
        source: ./credentials
        target: /app/credentials
        read_only: true
    healthcheck:
      test: curl -f http://localhost:8000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    networks:
      - backend_network

  # データベースサービス
  db:
    image: postgres:15
    env_file:
      - .env
    environment:
      - POSTGRES_DB=wellness_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - type: bind
        source: ./backend/database/init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
    healthcheck:
      test: pg_isready -U postgres
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    networks:
      - backend_network

# 永続化用のボリューム定義
volumes:
  postgres_data:
    name: wellness_postgres_data

# ネットワーク定義
networks:
  frontend_network:
    name: wellness_frontend_net
  backend_network:
    name: wellness_backend_net